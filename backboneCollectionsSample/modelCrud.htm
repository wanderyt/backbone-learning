<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Backbone Sample Application</title>
    <script src="libs/jquery-1.9.1.js" type="text/javascript"></script>
    <script src="libs/underscore.js" type="text/javascript"></script>
    <script src="libs/json2.js" type="text/javascript"></script>
    <script src="libs/backbone.js" type="text/javascript"></script>
    <script src="js/model.js" type="text/javascript"></script>
</head>
<body>
    <div class="main">
        <script type="text/javascript">

            function testCreate() {
                // Lets create an empty collection
                var collection1 = new BooksCollection();

                //Lets create a prepopulated collection
                var book1 = new Book({ ID: 1,  BookName: "Book 1" });
                var book2 = new Book({ ID: 2, BookName: "Book 2" });

                var collection2 = new BooksCollection([book1, book2]);

                var book3 = new Book({ ID: 3, BookName: "Book 3" });
                collection2.add(book3);

                var book3_changed = new Book({ ID: 3, BookName: "Changed Model" });
                // Check difference by cid
                collection2.add(book3_changed, { merge: true });

                var book4 = new Book({ ID: 4, BookName: "Book 4" });
                var book5 = new Book({ ID: 5, BookName: "Book 5" });
                collection2.add([book4, book5]);

                var book0 = new Book({ ID: 0, BookName: "Book 0" });
                collection2.add(book0, { at: 0 });

                collection2.remove(book0);

                collection1.add(book2);
                collection1.add(book3);

                collection1.reset();

                collection1.add(book2);
                collection1.add(book3);

                collection1.reset([book4, book5]);

                console.log(collection1.length);

                var bookRecieved = collection2.at(3);

                var index = collection2.indexOf(bookRecieved);

                var bookFetchedbyId = collection2.get(2); // get the book with ID=2
                var bookFetchedbyCid = collection2.get("c3"); // get the book with cid=c3

                for (var i = 0; i < collection2.length; ++i) {
                    console.log(collection2.at(i).get("BookName"));
                }

                collection2.each(function (item, index, all) {
                    console.log(item.get("BookName"));
                });

                collection2.add({ ID: 21, BookName: "test sort" }, { at: 1 });


                var collection3 = new BooksCollection();
                collection3.add(book1);
                collection3.add(book2);
                collection3.add(book3);

                collection3.set([book1, { ID: 3, BookName: "test sort"}, book5]);

                var collection4 = new BooksCollection();
                collection4.fetch({
                    success: function (collection4, response) {
                        // fetch successful, lets iterate and update the values here
                        collection4.each(function (item, index, all) {
                            item.set("BookName", item.get("BookName") + "_updated"); // lets update all book names here
                            item.save();
                        });
                    }
                });
            }
        </script>

        <input id="Button1" type="button" value="Test collection" onclick="testCreate();" />
    </div>
</body>
</html>
